server:
  # Google Cloud Run tells us where to listen using the PORT environment variable.
  # Our k8s deployments use the Spring Boot name, SERVER_PORT.
  # The following line allows either PORT or SERVER_PORT to specify the port the service listens on.
  # If neither is specified, the default port will be 8085. This is a good default for local development.
  # If both are specified (not recommended) SERVER_PORT will take precedence.
  port: ${PORT:8085}

frontend-config:
  # The "head" section is for anything related to the HEAD subtree (<head>).
  head:
    # Document title
    title: "DDAP"
  # The "ui" section is for anything related to the UI in general (anything under <body>).
  ui:
    # UI Title
    title: "DDAP"
    logo-url: null
    theme: null
  default-route: 'data/collections'
  # To see all options go to com.dnastack.ddap.explore.config.model.FrontendApp
  enabled-apps:
    - DATA
    - SEARCH
    - WORKFLOWS
  # To see all options go to com.dnastack.ddap.explore.config.model.FrontendFeature
  enabled-features:
  in-standalone-mode: ${ddap.dam-facade}
  google-analytics-id: null
  tos-url: 'https://www.dnastack.com/terms'
  privacy-policy-url: 'https://www.dnastack.com/privacy'
  list-page-size: 20
  apps:
    search:
      # The default query, IF DEFINED, will make the UI to run the first query automatically on initialization.
      default-query: null
    workflows:
      trs-base-url: "https://dockstore.org/api/api/ga4gh/v2"
      trs-accepted-tool-classes: ['Workflow']
      trs-accepted-version-descriptor-types: ['WDL']

dams:
  1:
    # If you try to run the DAM and IC locally, they need to use different domain names,
    # otherwise their cookies will conflict.
    # Unfortunately when not using HTTPS, DAM requires it's domain to START with localhost,
    # and Hydra requires it's domain to END with localhost
    base-url: http://localhost.dam.localhost:8083/
    client-id: 812c1319-fef5-4aa6-9393-beb5ec8facdf
    client-secret: 0000-0000-0000-0000-0000
    ui-url: http://localhost:8087/


ic:
  ui-url: http://localhost:8086/

dam-facade:
  label: "DAM Facade"
  base-url: ${ddap.public-uri}
  oauth2:
    issuer: https://sample-oauth-server/common
    authorization-url: https://sample-oauth-server/oauth/authorize
    token-url: https://sample-oauth-server/oauth/token
    userinfo-url: https://sample-oauth-server/me
    client-id: foo
    client-secret: bar
    default-scope: openid profile email
  resources:
    wes:
      id: 0000-0000-0000-0000-0000
      name: "WES"
      description: "Workflow Execution Service"
      views:
        wes-solo:
          name: "WES-SOLO"
          description: "Standalone Mode"
          url: "https://wes.experimental.dnastack.com"  # This is a fake location.
          service-template: "wes"
          interface-name: "http:wes"
          permissions: ["list", "metadata", "read", "write"]
          controlled-access: true
    search:
      id: 0000-0000-0000-0000-0000
      name: "search"
      description: "Search Services"
      views:
        public:
          name: "public"
          description: "Public Search Service"
          url: "https://ga4gh-search-adapter-presto-public.staging.dnastack.com"  # This is a fake location.
          service-template: "search"
          interface-name: "http:search"
          permissions: ["list", "metadata", "read", "write"]
          controlled-access: false
  # FIXME replace the rest with "resources"
  resource-name: WES
  resource-description: Workflow Execution Service
  view-name: WES-SOLO
  view-description: Standalone Mode
  wes-server-url: https://wes.experimental.dnastack.com  # This is a fake location.
  wes-resource-id: 0000-0000-0000-0000-0000

ddap:
  dam-facade: false
  public-uri: http://localhost:8085
  default-realm: dnastack
  # Development key should not be deployed. There is an e2e test preventing this.
  signingKey: |
    VGhlcmUgb25jZSB3YXMgYSBsYW5ndWFnZSBjYWxsZWQgYmFzaApJdCdzIHNlbWFudGljcyB3ZXJlIG9mdGVuIHF1aXRlI
    HJhc2gKQnV0IGl0IHdvcmtlZCwgbW9yZSBvciBsZXNzCkV2ZW4gdGhvdWdoIGl0J3MgYSBtZXNzClNvIEkgZ3Vlc3MgaX
    Qgc3RheXMgb3V0IG9mIHRoZSB0cmFzaAo=
  cors:
    origins: "http://localhost:4200"
  cookies:
    # Default to false so cookies work on http://localhost
    # e2e tests will remind you to set this true in real deployments!
    secure: false
    encryptor:
      password: 'abcdefghijk'
      salt: '598953e322' # must be at least 8 char length and hexadecimal
  command-line-service:
    aud: ${ddap.public-uri}
    ttl: PT10M
    signingKey: ${ddap.signingKey}
  state-handler:
    aud: ${ddap.public-uri}
    ttl: PT10M
    signingKey: ${ddap.signingKey}
  wdl-validator:
    url: https://wdl-validator.staging.dnastack.com
    token: 1c0c52bedbc8c88bd998fa919243f32bcf5b201818288f112a477d118cc24d36
logging:
  level:
    com:
      dnastack:
        ddap: DEBUG
spring:
  main:
    allow-bean-definition-overriding: true
  datasource:
    driver-class-name: org.postgresql.Driver
    username: ddap-explore
    password: ""
    url: jdbc:postgresql://localhost/ddap-explore
---

spring:
  profiles: auth
  security:
    user:
      name: dev
      password: dev
  main:
    allow-bean-definition-overriding: true
  datasource:
    driver-class-name: org.postgresql.Driver
    username: ddap-explore
    password: ""
    url: jdbc:postgresql://localhost/ddap-explore


---

spring:
  profiles: default

resources:
  spi:
    clients:
      dam-1:
        factory-name: dam-resource-client-factory
        spi-properties:
          baseUrl: ${dams.1.base-url}
          clientId: ${dams.1.client-id}
          clientSecret: ${dams.1.client-secret}
          uiUrl: ${dams.1.ui-url}
      wallet-1:
        factory-name: wallet-resource-client-factory
        spi-properties:
          tokenUrl: "http://localhost:8081/oauth/token"
          authorizationUrl: "http://localhost:8081/oauth/authorize"
          clientId: ddap-local
          clientSecret: ddap-local
          resources:
            0:
              name: WES API Reader
              description: Read from local wes server
              collectionId: 0
              audience: aud1
              scope: read
              interfaceType: http:wes
              interfaceUri: http://localhost:8080
            1:
              name: WES API Executor
              description: Executre on the local wes server
              collectionId: 0
              audience: aud1
              scope: write
              interfaceType: http:wes
              interfaceUri: http://localhost:8080
            2:
              name: Search API Spender
              description: Execute queries on the search api
              collectionId: 0
              audience: aud2
              scope: explode
              interfaceType: http:search
              interfaceUri: http://localhost:8082
          collections:
            0:
              name: Local Resources From Wallet
              description: A collection of local resources
      open-1:
        factory-name: open-resource-client-factory
        spi-properties:
          resources:
            0:
              name: Covid Virus Beacon
              description: Read From public covid Beacon
              collectionId: 0
              interfaceType: http:beacon:virus
              interfaceUri: https://beacon.covid-19.dnastack.com/beacon/public

          collections:
            0:
              name: Covid Resources
              description: A collection of Public Resources for dealing with Covid

---

spring:
  profiles: covid19-dev

resources:
  spi:
    clients:
      covid-public:
        factory-name: "open-resource-client-factory"
        spi-properties:
          resources:
            0:
              name: "COVID-19 Beacon"
              description: "Public COVID-19 Beacon"
              collectionId: "0"
              interfaceType: "http:beacon:virus"
              interfaceUri: "https://beacon.staging.covid-19.dnastack.com/beacon/controlled"
              metadata:
                iconName: "wifi_tethering"
            1:
              name: "Sequences"
              imageUrl: null
              description: "Sequences"
              collectionId: "0"
              interfaceType: "http:search:table"
              interfaceUri: "https://ga4gh-search-adapter-presto-covid19-public.staging.dnastack.com"
              metadata:
                iconName: "sync_alt"
                tableName: "covid_cloud.covid_cloud_staging.sequences_view"
            2:
              name: "Variants"
              imageUrl: null
              description: "Variants"
              collectionId: "0"
              interfaceType: "http:search:table"
              interfaceUri: "https://ga4gh-search-adapter-presto-covid19-public.staging.dnastack.com"
              metadata:
                iconName: "scatter_plot"
                tableName: "covid_cloud.covid_cloud_staging.variants_flattened_view"
            3:
              name: "Files"
              imageUrl: null
              description: "Files"
              collectionId: "0"
              interfaceType: "http:search:table"
              interfaceUri: "https://ga4gh-search-adapter-presto-covid19-public.staging.dnastack.com"
              metadata:
                iconName: "layers"
                tableName: "covid_cloud.covid_cloud_staging.files_view"
            # "Molecules uses "gesture" icon
          collections:
            0:
              name: "COVID-19 Cloud"
              description: "A Collection of Public Resources for Covid-19"
            # 1:
            #   name: "Sample Collection"
            #   description: "This is for testing only."
